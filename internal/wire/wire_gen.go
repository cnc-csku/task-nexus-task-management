// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/cnc-csku/task-nexus/task-management/config"
	"github.com/cnc-csku/task-nexus/task-management/domain/services"
	llm2 "github.com/cnc-csku/task-nexus/task-management/internal/adapters/repositories/llm"
	"github.com/cnc-csku/task-nexus/task-management/internal/adapters/repositories/mongo"
	storage2 "github.com/cnc-csku/task-nexus/task-management/internal/adapters/repositories/storage"
	"github.com/cnc-csku/task-nexus/task-management/internal/adapters/rest"
	"github.com/cnc-csku/task-nexus/task-management/internal/infrastructure/api"
	"github.com/cnc-csku/task-nexus/task-management/internal/infrastructure/database"
	"github.com/cnc-csku/task-nexus/task-management/internal/infrastructure/llm"
	"github.com/cnc-csku/task-nexus/task-management/internal/infrastructure/router"
	"github.com/cnc-csku/task-nexus/task-management/internal/infrastructure/storage"
	"github.com/cnc-csku/task-nexus/task-management/middlewares"
)

// Injectors from wire.go:

func InitializeApp() *api.EchoAPI {
	context := NewCtx()
	configConfig := config.NewConfig()
	client := database.NewMongoClient(configConfig, context)
	authMiddleware := middlewares.NewAdminJWTMiddleware(configConfig)
	healthCheckHandler := rest.NewHealthCheckHandler()
	globalSettingRepository := mongo.NewMongoGlobalSettingRepo(configConfig, client)
	minioClient := storage.NewMinIOClient(context, configConfig)
	minioRepository := storage2.NewMinioRepository(minioClient, configConfig)
	commonService := services.NewCommonService(globalSettingRepository, minioRepository)
	commonHandler := rest.NewCommonHandler(commonService)
	userRepository := mongo.NewMongoUserRepo(configConfig, client)
	userService := services.NewUserService(configConfig, userRepository, globalSettingRepository)
	userHandler := rest.NewUserHandler(userService)
	workspaceRepository := mongo.NewMongoWorkspaceRepo(configConfig, client)
	workspaceMemberRepository := mongo.NewMongoWorkspaceMemberRepo(configConfig, client)
	projectRepository := mongo.NewMongoProjectRepo(configConfig, client)
	projectMemberRepository := mongo.NewMongoProjectMemberRepo(configConfig, client)
	taskRepository := mongo.NewMongoTaskRepo(configConfig, client)
	projectService := services.NewProjectService(userRepository, workspaceRepository, workspaceMemberRepository, projectRepository, projectMemberRepository, configConfig, taskRepository)
	projectHandler := rest.NewProjectHandler(projectService)
	projectMemberService := services.NewProjectMemberService(userRepository, projectRepository, projectMemberRepository)
	projectMemberHandler := rest.NewProjectMemberHandler(projectMemberService)
	invitationRepository := mongo.NewMongoInvitationRepo(configConfig, client)
	invitationService := services.NewInvitationService(userRepository, workspaceRepository, invitationRepository, workspaceMemberRepository, configConfig)
	invitationHandler := rest.NewInvitationHandler(invitationService)
	workspaceService := services.NewWorkspaceService(workspaceRepository, globalSettingRepository, userRepository, workspaceMemberRepository)
	workspaceHandler := rest.NewWorkspaceHandler(workspaceService)
	sprintRepository := mongo.NewMongoSprintRepo(configConfig, client)
	sprintService := services.NewSprintService(sprintRepository, projectRepository, projectMemberRepository, taskRepository)
	sprintHandler := rest.NewSprintHandler(sprintService)
	taskCommentRepository := mongo.NewMongoTaskCommentRepo(configConfig, client)
	geminiClient := llm.NewGeminiClient(context, configConfig)
	geminiRepository := llm2.NewGeminiRepo(geminiClient, configConfig)
	taskService := services.NewTaskService(taskRepository, projectRepository, projectMemberRepository, sprintRepository, taskCommentRepository, userRepository, geminiRepository)
	taskHandler := rest.NewTaskHandler(taskService)
	taskCommentService := services.NewTaskCommentService(userRepository, taskCommentRepository, taskRepository, projectRepository, projectMemberRepository)
	taskCommentHandler := rest.NewTaskCommentHandler(taskCommentService)
	routerRouter := router.NewRouter(authMiddleware, healthCheckHandler, commonHandler, userHandler, projectHandler, projectMemberHandler, invitationHandler, workspaceHandler, sprintHandler, taskHandler, taskCommentHandler)
	echoAPI := api.NewEchoAPI(context, configConfig, client, routerRouter)
	return echoAPI
}
